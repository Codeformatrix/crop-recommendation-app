import streamlit as st
import joblib
import numpy as np
import os
import json

# Load model artifacts
model_dir = "./model_artifacts"
model = joblib.load(os.path.join(model_dir, "model.joblib"))
scaler = joblib.load(os.path.join(model_dir, "scaler.joblib"))
le = joblib.load(os.path.join(model_dir, "label_encoder.joblib"))

with open(os.path.join(model_dir, "meta.json"), "r") as f:
    meta = json.load(f)

st.set_page_config(page_title="AI Crop Recommendation", page_icon="ЁЯМ▒", layout="centered")

# Sidebar for language selection
language = st.sidebar.selectbox("ЁЯМР Language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ", ["English", "Hindi"])

# Translations for UI labels
translations = {
    "title": {"English": "ЁЯМ▒ AI-Powered Crop Recommendation System", "Hindi": "ЁЯМ▒ рдПрдЖрдИ рдЖрдзрд╛рд░рд┐рдд рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рдгрд╛рд▓реА"},
    "desc": {"English": "Enter soil and weather details below to get the best crop recommendation.",
             "Hindi": "рдиреАрдЪреЗ рдорд┐рдЯреНрдЯреА рдФрд░ рдореМрд╕рдо рдХрд╛ рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВ рддрд╛рдХрд┐ рд╕рд░реНрд╡рд╢реНрд░реЗрд╖реНрда рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдорд┐рд▓реЗред"},
    "nitrogen": {"English": "Nitrogen (N)", "Hindi": "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (N)"},
    "phosphorus": {"English": "Phosphorous (P)", "Hindi": "рдлреЙрд╕реНрдлреЛрд░рд╕ (P)"},
    "potassium": {"English": "Potassium (K)", "Hindi": "рдкреЛрдЯреИрд╢рд┐рдпрдо (K)"},
    "temperature": {"English": "Temperature (┬░C)", "Hindi": "рддрд╛рдкрдорд╛рди (┬░C)"},
    "humidity": {"English": "Humidity (%)", "Hindi": "рдирдореА (%)"},
    "soil_ph": {"English": "Soil pH", "Hindi": "рдорд┐рдЯреНрдЯреА рдХрд╛ pH"},
    "rainfall": {"English": "Rainfall (mm)", "Hindi": "рд╡рд░реНрд╖рд╛ (рдорд┐рдореА)"},
    "recommend_btn": {"English": "ЁЯФН Recommend Crop", "Hindi": "ЁЯФН рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░реЗрдВ"},
    "recommended_crop": {"English": "ЁЯМ╛ Recommended Crop:", "Hindi": "ЁЯМ╛ рдЕрдиреБрд╢рдВрд╕рд┐рдд рдлрд╕рд▓:"},
    "confidence": {"English": "тЬЕ Confidence:", "Hindi": "тЬЕ рднрд░реЛрд╕рд╛:"},
    "accuracy": {"English": "(Model test accuracy: {:.2f}%)", "Hindi": "(рдореЙрдбрд▓ рдкрд░реАрдХреНрд╖рдг рд╕рдЯреАрдХрддрд╛: {:.2f}%)"},
}

# Crop translations
crop_translations = {
    "rice": "рдЪрд╛рд╡рд▓", "wheat": "рдЧреЗрд╣реВрдБ", "maize": "рдордХреНрдХрд╛", "chickpea": "рдЪрдирд╛",
    "kidneybeans": "рд░рд╛рдЬрдорд╛", "pigeonpeas": "рдЕрд░рд╣рд░", "mothbeans": "рдордЯрдХреА", "mungbean": "рдореВрдВрдЧ",
    "blackgram": "рдЙрдбрд╝рдж", "lentil": "рдорд╕реВрд░", "pomegranate": "рдЕрдирд╛рд░", "banana": "рдХреЗрд▓рд╛",
    "mango": "рдЖрдо", "grapes": "рдЕрдВрдЧреВрд░", "watermelon": "рддрд░рдмреВрдЬ", "muskmelon": "рдЦрд░рдмреВрдЬрд╛",
    "apple": "рд╕реЗрдм", "orange": "рд╕рдВрддрд░рд╛", "papaya": "рдкрдкреАрддрд╛", "coconut": "рдирд╛рд░рд┐рдпрд▓",
    "cotton": "рдХрдкрд╛рд╕", "jute": "рдЬреВрдЯ", "coffee": "рдХреЙрдлрд╝реА",
}

# UI
st.title(translations["title"][language])
st.write(translations["desc"][language])

# Input fields (translated)
N = st.number_input(translations["nitrogen"][language], min_value=0, max_value=150, value=90)
P = st.number_input(translations["phosphorus"][language], min_value=0, max_value=150, value=42)
K = st.number_input(translations["potassium"][language], min_value=0, max_value=150, value=43)
temperature = st.number_input(translations["temperature"][language], min_value=0, max_value=50, value=20)
humidity = st.number_input(translations["humidity"][language], min_value=0, max_value=100, value=82)
ph = st.number_input(translations["soil_ph"][language], min_value=0.0, max_value=14.0, value=6.5, step=0.1)
rainfall = st.number_input(translations["rainfall"][language], min_value=0, max_value=500, value=202)

if st.button(translations["recommend_btn"][language]):
    features = np.array([[N, P, K, temperature, humidity, ph, rainfall]])
    features_scaled = scaler.transform(features)

    prediction = model.predict(features_scaled)[0]
    crop = le.inverse_transform([prediction])[0]

    probs = model.predict_proba(features_scaled)[0]
    confidence = np.max(probs)

    crop_display = crop if language == "English" else crop_translations.get(crop, crop)

    st.success(f"{translations['recommended_crop'][language]} {crop_display.capitalize()}")
    st.info(f"{translations['confidence'][language]} {confidence*100:.2f}%")
    st.caption(translations["accuracy"][language].format(meta['accuracy']*100))
